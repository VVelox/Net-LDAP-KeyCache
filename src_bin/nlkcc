#!perl

=head1 NAME

nlkcc - Client for talking to the nlkcd socket.

=head1 SYNOPSIS

nlkcc B<--key> <key> B<--val> <val> [B<--socket> <sock>] [B<-V>]

nlkcc B<--search> <search> [B<--socket> <sock>] [B<-V>]

nlkcc B<--stats> [B<--socket> <sock>] [B<-V>]

nlkcc B<--ls> [B<--socket> <sock>] [B<-V>]

nlkcc B<--version>

nlkcc B<--help>

=head1 DESCRIPTION

=head1 FLAGS

=head2 GENERAL

=head3 --socket <sock>

The unix socket to connect to.

=head3 -V

Verbose.

=head2 Command: fetch

=head3 --key <key>

The key to lookup.

=head3 --val <val>

The value to lookup.

=head2 Command: stats

=head3 --stats

Fetch the stats info.

=head2 Command: search

=head3 -s <search>

The LDAP search to run.

=head2 Command: list_searches

=head3 --ls

Fetches search info.

=cut

use strict;
use warnings;
use IO::Socket::UNIX;
use Getopt::Long;
use JSON;
use Pod::Usage;
use Net::LDAP::KeyCache;

# set the socket path and then check if one is specied via ENV
my $socket_path = '/var/run/nlkcd/socket';
if ( defined( $ENV{nlkcd_socket} ) ) {
	$socket_path = $ENV{nlkcd_socket};
}

sub version {
	print 'nlkcc v. ' . $Net::LDAP::KeyCache::VERSION . "\n";
}

sub read_socket_line {
	my ($socket) = @_;

	my $data = '';

	my $found_eol;
	while ( $socket->atmark && !$found_eol ) {
		my $tmpdata;
		$socket->read( $tmpdata, 1 );
		if ( $tmpdata eq "\n" ) {
			$found_eol = 1;
		} else {
		}
		{
			$data = $data . $tmpdata;
		}
	} ## end while ( $socket->atmark && !$found_eol )

	return $data;
} ## end sub read_socket_line

my $key = undef;
my $val = undef;
my $help;
my $version;
my $verbose;
my $stats;
my $search;
my $list_searches;
GetOptions(
	'h'        => \$help,
	'help'     => \$help,
	'key=s'    => \$key,
	'val=s'    => \$val,
	'V'        => \$verbose,
	'version'  => \$version,
	'socket=s' => \$socket_path,
	'stats'    => \$stats,
	's=s'      => \$search,
	'ls'       => \$list_searches,
);

if ($version) {
	version;
	exit 255;
}

if ($help) {
	&version;

	print "\n\n";

	pod2usage( -exitval => 255, -verbose => 2, -output => \*STDOUT );
}
my $socket;
eval { $socket = IO::Socket::UNIX->new( Peer => $socket_path, Type => SOCK_STREAM(), Timeout => 10 ) or die $@; };
if ($@) {
	die( 'Failed to connect to "' . $socket_path . '" ... ' . $@ );
}

my $header = read_socket_line($socket);
if ($verbose) {
	print 'Recieved: ' . $header;
}

my $command;
if ( defined($key) && defined($val) ) {
	$command = encode_json( { command => 'fetch', 'var' => $key, 'val' => $val } ) . "\n";
} elsif ( defined($search) ) {
	$command = encode_json( { command => 'search', 'search' => $search, } ) . "\n";
} elsif ($stats) {
	$command = encode_json( { command => 'stats' } ) . "\n";
} elsif ($list_searches) {
	$command = encode_json( { command => 'list_searches' } ) . "\n";
}

$socket->send($command);
if ($verbose) {
	print 'Sent: ' . $command;
}

my $data = read_socket_line($socket);

if ($verbose) {
	print 'Recieved: ';
}
print $data;

$socket->close;
