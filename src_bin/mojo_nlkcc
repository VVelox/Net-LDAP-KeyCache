#!perl

=head1 NAME

mojo_nlkcc - Mojolicious front end for nlkcd.

=head1 SYNOPSIS

mojo_nlkcc daemon -m production -l http://<ip>:<port>

=head1 DESCRIPTION

To use this as a CGI script, copy this to location of the CGI bin.

May be used as a fast CGI script via running this locally as a daemon
and forwarding that path to the where it is listening on.2

For more information on args see `mojo_nlkcc --help` as well as
https://docs.mojolicious.org/Mojolicious/Commands#COMMANDS .

=head1 Arguments

All arguments are undef by default.

    - apikey :: The API key to use for access.

    - type :: The request type.

Type following types don't require any other args.

    stats
    list_searches

'fetch' requires...

    - key :: The key to search.

    - val :: The value to look for in the the key.

'search requires...

    - search :: The LDAP query append to the base query.

=head2 examples

    API Key: foo
    Command: fetch
    key: uid
    val: bar

    /?apifkey=foo&type=fetch&key=uid&val=bar


    API Key: undef
    Command: fetch
    key: email
    val: foo@bar.derp

    /?type=fetch&key=email&val=foo@bar.derp


    API Key: undef
    Command: stats

    /?type=stats


    API Key: undef
    Command: search
    Search: uid=derp

    /?type=stats&search=uid=derp


    API Key: undef
    Command: stats

    /?type=list_searches


=head1 CONFIGURATION

This reads the configuration file at '/usr/local/etc/nlkcd.toml'
and uses the following keys.

    - socket :: The socket location for nlkcd.
        Default :: /var/run/nlkcd/socket

    - webacl :: The Web::ACL config location.
        Default :: /usr/local/etc/webacl/nlkcd.yaml

=head2 Web::ACL

The following slugs are available and are mapped to the command
used, the type arg.

    fetch
    search
    stats
    list_searches

Each correspont request type performed.


    # allows all slugs from API key derpfoo
    derpfoo:
      final: 1
    # allows only the stats slug from API key fooFoo1
    fooFoo1:
      slug_auth: 1
      slug_require: 1
      final: 1
      slugs: [ 'stats' ]
    # disallow all requests from non-existent API keys
    nonexistent:
      final: 0
    # allow all slugs with a undef API keys from the specified subnets
    undef:
      ip_auth: 1
      require_ip: 1
      final: 1
      allow_subnets: [ '127.0.0.1/32', '10.0.0.0/8' ]

For more information, see L<Web::ACL>.

=cut

use strict;
use warnings;
use Mojolicious::Lite -signatures;
use File::Slurp;
use YAML::XS;
use TOML qw(from_toml);
use Web::ACL;
use Sys::Syslog;
use JSON;
use IO::Socket::UNIX;

##
## send log messages to syslog
##
sub verbose {
	my ( $level, $string ) = @_;

	if ( !defined($string) || $string eq '' ) {
		return;
	}

	if ( !defined($level) ) {
		$level = 'info';
	}

	openlog( 'mojo_nlkcc', undef, 'daemon' );
	syslog( $level, $string );
	closelog();

	return;
} ## end sub verbose

# read the config file in and figure out what to use for the socket
# as well as the Web::ACL file.
my $config_file = '/usr/local/etc/nlkcd.toml';
our $config;
my $err;
eval {
	my $config_raw = read_file($config_file);
	( $config, $err ) = from_toml($config_raw);
	unless ($config) {
		my $error_string = 'Error parsing "' . $config_file . '"... ' . $err;
		verbose( 'err', $error_string );
		die($error_string);
	}
};
if ($@) {
	my $error_string = 'Failed to read config, "' . $config_file . '"... ' . $@;
	verbose( 'err', $error_string );
	die($error_string);
}
if ( !defined( $config->{socket} ) ) {
	$config->{socket} = '/var/run/nlkcd/socket';
}
verbose( 'info', 'Socket: ' . $config->{socket} );
if ( !defined( $config->{webacl} ) ) {
	$config->{webacl} = '/usr/local/etc/webacl/nlkcd.yaml';
}
verbose( 'info', 'Web ACL YAML: ' . $config->{webacl} );

my $acl_config;
eval {
	my $raw_webacl = read_file( $config->{webacl} );
	$acl_config = Load($raw_webacl);
};
if ($@) {
	my $error_string = 'Failed reading or parsing Web ACL YAML, "' . $config->{webacl} . '"... ' . $@;
	verbose( 'err', $error_string );
	die($error_string);
}
our $acl;
eval { $acl = Web::ACL->new( acl => $acl_config ); };
if ($@) {
	my $error_string = 'Failed to create the Web::ACL object from, "' . $config->{webacl} . '"... ' . $@;
	verbose( 'err', $error_string );
	die($error_string);
}

##
## send all requests to the handler
##
get '/*' => sub ($c) {
	the_stuff($c);
};
get '/' => sub ($c) {
	the_stuff($c);
};

##
## what to use to actually process the request
##
sub the_stuff {
	my $c         = $_[0];
	my $remote_ip = $c->{tx}{original_remote_address};

	# get and log basic initial info
	#
	# this is before type checking etc for the purpose of debugging
	verbose( 'info', 'Remote IP: ' . $remote_ip );
	my $apikey = $c->param('apikey');
	if ( !defined($apikey) ) {
		$apikey = 'undef';
	}
	verbose( 'info', 'API Key: ' . $apikey );

	# don't bother proceeding further as if we don't have a type, no reason to do anything else
	my $type = $c->param('type');
	if ( !defined($type) ) {
		$c->render( text => "No type specified", status => 400, );
		verbose( 'err', 'No type specified' );
		return;
	}
	verbose( 'info', 'Type: ' . $type );

	# type is used as the slug for the check
	my $acl_check;
	eval { $acl_check = $acl->check( apikey => $apikey, ip => $remote_ip, slugs => [$type], ); };
	if ($@) {
		$c->render( text => 'backend error', status => 400, );
		verbose( 'err', 'Error checking the Web ACL object... ' . $@ );
		return;
	}
	if ( !$acl_check ) {
		$c->render( text => "unauthed", status => 403, );
		verbose( 'err',
			'Web ACL denied access for... apikey="' . $apikey . '" type="' . $type . '" ip="' . $remote_ip . '"' );
		return;
	}
	verbose( 'info',
		'Web ACL alloed access for... apikey="' . $apikey . '" type="' . $type . '" ip="' . $remote_ip . '"' );

	# generate the command string as well as get the various variables as well as make sure we have what we need
	my $search;
	my $key;
	my $val;
	my $command;
	my $nc;
	if ( $type eq 'fetch' ) {
		$key = $c->param('key');
		$val = $c->param('val');
		$nc  = $c->param('nc');

		if ( !$nc ) {
			$nc = 0;
		} else {
			$nc = 1;
		}

		if ( !defined($key) ) {
			$c->render( text => "No key specified", status => 400, );
			verbose( 'err', 'No key specified' );
			return;
		} elsif ( !defined($val) ) {
			$c->render( text => "No val specified", status => 400, );
			verbose( 'err', 'No val specified' );
			return;
		}
		verbose( 'info', 'Key: ' . $key );
		verbose( 'info', 'Val: ' . $val );

		$command = encode_json( { command => 'fetch', 'var' => $key, 'val' => $val, nc => $nc } ) . "\n";
	} elsif ( $type eq 'search' ) {
		$search = $c->param('search');
		$nc     = $c->param('nc');

		if ( !$nc ) {
			$nc = 0;
		} else {
			$nc = 1;
		}

		if ( !defined($search) ) {
			$c->render( text => "No search specified", status => 400, );
			verbose( 'err', 'No search specified' );
			return;
		}
		verbose( 'info', 'Search: ' . $search );

		$command = encode_json( { command => 'search', 'search' => $search, nc => $nc } ) . "\n";
	} elsif ( $type eq 'stats' ) {
		$command = encode_json( { command => 'stats' } ) . "\n";
	} elsif ( $type eq 'list_searches' ) {
		$command = encode_json( { command => 'list_searches' } ) . "\n";
	} else {
		$c->render( text => "Invalid type specified", status => 400, );
		verbose( 'err', 'Type "' . $type . '" is not understood' );
		return;
	}

	# if we have gotten this far, actually connect up
	my $socket;
	eval {
		$socket = IO::Socket::UNIX->new( Peer => $config->{socket}, Type => SOCK_STREAM(), Timeout => 10 )
			or die $@;
	};
	if ($@) {
		$c->render( text => 'backend error', status => 400, );
		verbose( 'err', 'Unparsable connect to socket: ' . $@ );
		return;
	}

	# first one gets the hello message
	my $data;
	eval { $data = <$socket> || die('read_socket_line returned false'); };
	if ($@) {
		$c->render( text => 'backend error', status => 400, );
		verbose( 'err', 'read_socket_line errored... ' . $@ );
		return;
	}

	# send the command to the socket
	eval { $socket->send($command); };
	if ($@) {
		$c->render( text => 'backend error', status => 400, );
		verbose( 'err', 'Failed to send command to socket... ' . $@ );
		return;
	}

	# read the results of the command
	eval { $data = <$socket> || die('read_socket_line returned false'); };
	if ($@) {
		$c->render( text => 'backend error', status => 400, );
		verbose( 'err', 'read_socket_line errored... ' . $@ );
		return;
	}

	# return the results
	$c->render( text => $data );

	# close the socket
	eval { $socket->close; };
	if ($@) {
		verbose( 'err', '$socket->close errored ... ' . $@ );
		return;
	}
} ## end sub the_stuff

# start mojolicious
app->start;
