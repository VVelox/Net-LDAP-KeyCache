#!perl

=head1 NAME

nlkcd - LDAP caching daemon with a JSON socket interface.

=head1 SYNOPSIS

nlkcd [B<-D>] [B<--config> <config>] [B<-g> <group>] [B<-u> <user>]

nlkcd (B<-h>|B<--help>)

nlkcd (B<-v>|B<--version>)

=head1 DESCRIPTION

Starts up L<Net::LDAP::KeyCache> and for more information
on the socket protocol, see the docs for it.

=head1 FLAGS

=head2 -D

Daemonize.

=head2 --config <config>

The TOML config to use.

The file is read in, parsed, and the resulting hash used for
for initializing L<Net::LDAP::KeyCache> via the new method.

Default :: /usr/local/etc/nlkcd.toml

=head2 -g <group>

The group to use.

Default :: wheel

=head2 -u <user>

The default user to use.

Default :: root

=head2 (-h|--help)

Either prints the help info.

=head2 (-v|--version)

Either pritns the version info.

=head2 CONFIG FILE

The config file accepts the keys below.

    - pid :: Location of the PID file.
        Default :: /var/run/nlkcd/pid

    - socket :: Socket locations.
        Default :: /var/run/nlkcd/socket

    - base_search :: The base to use for the search.
        Default :: (|(objectClass=person)(objectClass=posixAccount)(objectClass=inetOrgPerson)(objectClass=account)(objectClass=posixGroup))

    - connect :: An array to of options to pass to ldapsearch. Should include the relevant
                 bind, base DN, and host options.
        Default :: undef

    - cache_time :: Timeout for cached items in seconds.
        Default :: 120

    - enable_ad_disable :: Enable AD lockout via ORing useraccountcontrol attributes via 0x0002
        Default :: 0

    - enable_ad_lockout :: Enable AD lockout via ORing useraccountcontrol attributes via 0x0010
        Default :: 0

=cut

use strict;
use warnings;
use Net::LDAP::KeyCache;
use TOML qw(from_toml);
use File::Slurp;
use Getopt::Long;
use Pod::Usage;
use Net::Server::Daemonize qw(daemonize);
use JSON;

sub version {
	print 'nlkcd v. ' . $Net::LDAP::KeyCache::VERSION . "\n";
}

sub help {
	&version;

	print "\n\n";

	pod2usage( -exitval => 255, -verbose => 2, -output => \*STDOUT );
}

my $help;
my $version;
my $config_file = '/usr/local/etc/nlkcd.toml';
my $daemonize;
my $user  = 'root';
my $group = 'wheel';
GetOptions(
	'version'  => \$version,
	'v'        => \$version,
	'help'     => \$help,
	'h'        => \$help,
	'config=s' => \$config_file,
	'D'        => \$daemonize,
	'g=s'      => \$group,
	'u=s'      => \$user,
);

# print version or help if requested
if ($help) {
	&help;
	exit 255;
}
if ($version) {
	&version;
	exit 255;
}

my $config;
my $err;
eval {
	my $config_raw = read_file($config_file);
	( $config, $err ) = from_toml($config_raw);
	unless ($config) {
		die($err);
	}
};
if ($@) {
	die( 'Failed to read config, "' . $config_file . '"... ' . $@ );
}

if ($daemonize) {
	$config->{daemonize} = 1;
} elsif ( !$daemonize && defined( $config->{daemonize} ) ) {
	delete( $config->{daemonize} );
}

my $nlkc = Net::LDAP::KeyCache->new( %{$config} );

$nlkc->verbose( 'info', 'nlkcd ' . $Net::LDAP::KeyCache::VERSION . ' starting...' );
$nlkc->verbose( 'info', 'PID: ' . $nlkc->{pid} );
$nlkc->verbose( 'info', 'Socket: ' . $nlkc->{socket} );
$nlkc->verbose( 'info', 'Base Search: ' . $nlkc->{base_search} );
$nlkc->verbose( 'info', 'Connect: ' . encode_json( $nlkc->{connect} ) );

if ($daemonize) {
	$nlkc->verbose( 'info', 'Daemonizing...' );
	$nlkc->{daemonized} = 1;
	daemonize( $user, $group, $nlkc->{pid} );
}

$nlkc->start_server;
