#!perl

=head1 NAME

nlkcc - Client for talking to the nlkcd socket.

=head1 SYNOPSIS

nlkcc B<--key> <key> B<--val> <val> [B<--socket> <sock>] [B<-V>] [B<--nc>] [<-d> <attribute>]

nlkcc B<--search> <search> [B<--socket> <sock>] [B<-V>] [B<--nc>] [<-d> <attribute>]

nlkcc B<--stats> [B<--socket> <sock>] [B<-V>]

nlkcc B<--ls> [B<--socket> <sock>] [B<-V>]

nlkcc B<--ad_disable> <dn>

nlkcc B<--ad_lockout> <dn>

nlkcc B<--version>

nlkcc B<--help>

=head1 DESCRIPTION

=head1 FLAGS

=head2 GENERAL

=head3 --socket <sock>

The unix socket to connect to.

=head3 -V

Verbose.

=head2 Command: fetch

=head3 --key <key>

The key to lookup.

=head3 --val <val>

The value to lookup.

=head3 --nc

Don't use cache.

=head3 -d <attribute>

A attribute you do not want to be returned. Can be used more than once.

=head2 Command: stats

=head3 --stats

Fetch the stats info.

=head2 Command: search

=head3 -s <search>

The LDAP search to run.

=head3 -d <attribute>

A attribute you do not want to be returned. Can be used more than once.

=head2 Command: list_searches

=head3 --ls

Fetches search info.

=head3 --nc

Don't use cache.

=cut

use strict;
use warnings;
use IO::Socket::UNIX;
use Getopt::Long;
use JSON;
use Pod::Usage;
use Net::LDAP::KeyCache;

# set the socket path and then check if one is specied via ENV
my $socket_path = '/var/run/nlkcd/socket';
if ( defined( $ENV{nlkcd_socket} ) ) {
	$socket_path = $ENV{nlkcd_socket};
}

sub version {
	print 'nlkcc v. ' . $Net::LDAP::KeyCache::VERSION . "\n";
}

my $key = undef;
my $val = undef;
my $help;
my $version;
my $verbose;
my $stats;
my $search;
my $list_searches;
my $no_cache;
my @drop;
my $ad_lockout;
my $ad_disable;
GetOptions(
	'h'          => \$help,
	'help'       => \$help,
	'key=s'      => \$key,
	'val=s'      => \$val,
	'V'          => \$verbose,
	'version'    => \$version,
	'socket=s'   => \$socket_path,
	'stats'      => \$stats,
	's=s'        => \$search,
	'ls'         => \$list_searches,
	'nc'         => \$no_cache,
	'd=s'        => \@drop,
	'ad_disable' => \$ad_disable,
	'ad_lockout' => \$ad_lockout,
);

if ($version) {
	version;
	exit 255;
}

if ( !$no_cache ) {
	$no_cache = '0';
} else {
	$no_cache = '1';
}

if ($help) {
	&version;

	print "\n\n";

	pod2usage( -exitval => 255, -verbose => 2, -output => \*STDOUT );
}
my $socket;
eval { $socket = IO::Socket::UNIX->new( Peer => $socket_path, Type => SOCK_STREAM(), Timeout => 10 ) or die $@; };
if ($@) {
	die( 'Failed to connect to "' . $socket_path . '" ... ' . $@ );
}

my $header = <$socket>;
if ($verbose) {
	print 'Recieved: ' . $header;
}

my $command;
if ( defined($key) && defined($val) ) {
	$command
		= encode_json( { command => 'fetch', 'var' => $key, 'val' => $val, nc => $no_cache, drop => \@drop } ) . "\n";
} elsif ( defined($search) ) {
	$command = encode_json( { command => 'search', 'search' => $search, nc => $no_cache, drop => \@drop } ) . "\n";
} elsif ($stats) {
	$command = encode_json( { command => 'stats' } ) . "\n";
} elsif ($list_searches) {
	$command = encode_json( { command => 'list_searches' } ) . "\n";
} elsif ($ad_disable) {
	$command = encode_json( { command => 'ad_disable', dn => $ad_disable } ) . "\n";
} elsif ($ad_lockout) {
	$command = encode_json( { command => 'ad_lockout', dn => $ad_lockout } ) . "\n";
}

$socket->send($command);
if ($verbose) {
	print 'Sent: ' . $command;
}

my $data = <$socket>;

if ($verbose) {
	print 'Recieved: ';
}
print $data;

$socket->close;
